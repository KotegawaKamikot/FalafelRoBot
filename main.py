from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
import logging
import sqlite3
import openai
import traceback
from deep_translator import GoogleTranslator
from glQiwiApi import QiwiWrapper, types as qiwi_types
from glQiwiApi import QiwiP2PClient
from glQiwiApi.qiwi.clients.p2p.types import Bill

openai.api_key = ''
model_engine = 'text-davinci-003'
max_tokens = 128

qiwi_p2p_client = QiwiP2PClient(secret_p2p="")

API_TOKEN = ''

chars = '+-/*!&$#?=@<>abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'

kbadm = types.ReplyKeyboardMarkup(resize_keyboard=True)
kbadm.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞üì§"))
kbadm.add(types.InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üí≠"))
kbadm.add(types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏üö®"))
kbadm.insert(KeyboardButton(text='–ë–î—à–∫–∞‚ú®'))
kbadm.insert(KeyboardButton(text='–ü—Ä–æ–±–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüß¶'))

kbusr = ReplyKeyboardMarkup(resize_keyboard=True)
kbusr.add(types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ ‚ö°Ô∏è'))
kbusr.add(types.KeyboardButton('–ú–∞–≥–∞–∑–∏–Ω üí∞'))
kbusr.add(types.KeyboardButton('–ü–æ–º–æ—â—å üßë‚Äçüíª'))
kbusr.add(types.KeyboardButton('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ üíó'))
kbusr.insert(KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å üë§'))

ikbusr = InlineKeyboardMarkup()
ikbusr.add(types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–ø–ø–æ—Ä—Ç—Éüê±‚ÄçüöÄ', url='https://t.me/bluefish1488'))
ikbusr.add(types.InlineKeyboardButton('–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞‚ö°', url='https://t.me/FalafelNotBot'))

logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

conn = sqlite3.connect('db.db')
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users(user_id INTEGER, name INTEGER, quest INTEGER, attempts INTEGER, 
ref INTEGER, link INTEGER);""")
conn.commit()

class UserState(StatesGroup):
    name = State()
    spam = State()
    dialog = State()
    check = State()
    attempts = State()
    usrcheck = State()
    openaii = State()
    pay = State()
    oper = State()
    opermess = State()
    correct = State()

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
        cur = conn.cursor()
        chat_admins = await bot.get_chat_administrators(-1001657487556)
        admid = list()
        for admins in chat_admins:
            userId = admins.user.id
            admid.append(userId)
        if message.from_user.id in admid:
            await message.answer('üéØ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!', reply_markup=kbadm)
        else:
            try:
                ref = message.text.split('/start ')
                cur.execute(f"SELECT user_id FROM users WHERE user_id = {message.from_user.id}")
                result = cur.fetchall()
                if len(result) == 0:
                    cur.execute(f'''INSERT INTO users (user_id, name, quest, attempts, ref, link) VALUES (
                    '{message.from_user.id}',
                    '{message.from_user.username}', 0, 3, {ref[1]}, 'https://ro8lox.com/groups/2002993832/')''')
                    cur.execute(f"SELECT name FROM users WHERE user_id = {ref[1]}")
                    refr = cur.fetchone()
                    conn.commit()
                    await message.answer("–ü—Ä–∏–≤–µ—Ç‚ú®", reply_markup=kbusr)
                    inline_ref = InlineKeyboardButton('üß•–ü—Ä–æ–º–æ—É—Ç–µ—Ä', url=f'tg://openmessage?user_id={ref[1]}')
                    inline_ref2 = InlineKeyboardButton('üß§–†–µ—Ñ–µ—Ä–∞–ª', url=f'tg://openmessage?user_id'
                                                                      f'={message.from_user.id}')
                    inref = InlineKeyboardMarkup().add(inline_ref, inline_ref2)
                    await bot.send_message(-1001657487556, f'{ref[1]} | #{refr[0]} –ø—Ä–∏–≤–µ–ª —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n'
                                                       f'{message.from_user.id} | @{message.from_user.username}',
                                           reply_markup=inref)
                    cur.execute(f"UPDATE users SET attempts = attempts + 1 WHERE user_id = {ref[1]}")
                    await bot.send_message(ref[1], '‚úÖ–í—ã –ø—Ä–∏–≤–µ–ª–∏ –¥—Ä—É–≥–∞, –∑–∞ —ç—Ç–æ –º—ã –Ω–∞—á–∏—Å–ª–∏–ª–∏ –≤–∞–º 1 –ø–æ–ø—ã—Ç–∫—É!')
                    conn.commit()
                else:
                    await message.answer("–ü—Ä–∏–≤–µ—Ç‚ú®", reply_markup=kbusr)
            except:
                    cur.execute(f"SELECT user_id FROM users WHERE user_id = {message.from_user.id}")
                    result = cur.fetchall()
                    if len(result) == 0:
                        cur.execute(f'''INSERT INTO users (user_id, name, quest, attempts, link) VALUES (
                        '{message.from_user.id}',
                        '{message.from_user.username}', 0, 1, 1)''')
                        conn.commit()
                        await message.answer("–ü—Ä–∏–≤–µ—Ç‚ú®", reply_markup=kbusr)
                    else:
                        await message.answer("–ü—Ä–∏–≤–µ—Ç‚ú®", reply_markup=kbusr)

@dp.message_handler(content_types=['text'], text='–ú–∞–≥–∞–∑–∏–Ω üí∞')
async def process_help_text(message: types.Message, state: FSMContext):
    user_channel_status = await bot.get_chat_member(chat_id='-1001881792031', user_id=message.from_user.id)
    if user_channel_status["status"] != 'left':
        ikbpay= InlineKeyboardMarkup()
        ikbpay.add(types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å 10 –ø–æ–ø—ã—Ç–æ–∫üí∏', callback_data='29rub'))
        ikbpay.add(types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å 50 –ø–æ–ø—ã—Ç–æ–∫üí∏', callback_data='99rub'))
        ikbpay.add(types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å 100 –ø–æ–ø—ã—Ç–æ–∫üí∏', callback_data='159rub'))
        ikbpay.add(types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –ë–ï–ó–õ–ò–ú–ò–¢ü™ô', callback_data='349rub'))
        await message.reply('\n*‚ûñ‚ûñ‚ûñüíé–ü—Ä@–π—Åüíé‚ûñ‚ûñ‚ûñ*\n\n10 –ø–æ–ø—ã—Ç–æ–∫ | *29 ‚ÇΩ* |\n50 –ø–æ–ø—ã—Ç–æ–∫ | *99 ‚ÇΩ* |\n100 –ø–æ–ø—ã—Ç–æ–∫ | *159 '
                            '‚ÇΩ* |\n–ë–ï–ó–õ–ò–ú–ò–¢'
                            '| *349 ‚ÇΩ* |', parse_mode='markdown', reply_markup=ikbpay)
    else:
        await bot.send_message(message.from_user.id, '*–û–π-–æ–π, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ! –ü–æ–¥–ø–∏—à–∏—Å—å, '
                                                     '—á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π!*', reply_markup=ikbusr,
                               parse_mode='markdown')

@dp.callback_query_handler(text='29rub')
async def process_help_text(callback: types.CallbackQuery, state: FSMContext):
    async with qiwi_p2p_client:
        bill = await qiwi_p2p_client.create_p2p_bill(amount=29)
    ikbpayurl = InlineKeyboardMarkup()
    ikbpayurl.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –æ–ø–ª–∞—Ç—ãü•á', url=bill.pay_url))
    ikbpayurl.add(types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É‚úÖ', callback_data='paystatus'))
    ikbpayurl.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É‚ùå', callback_data='payabort'))
    await callback.message.answer('*–í–æ—Ç –≤–∞—à–∞ —Ñ–æ—Ä–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã*', reply_markup=ikbpayurl, parse_mode='markdown')
    await UserState.pay.set()
    await state.update_data(bill=bill)

@dp.callback_query_handler(text='payabort', state=UserState.pay)
async def process_help_text(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.answer(f'–û—Ç–∫–∞–∑ –æ–ø–ª–∞—Ç—ã', reply_markup=kbusr)
        await state.finish()

@dp.callback_query_handler(text='paystatus', state=UserState.pay)
async def process_help_text(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        bill: Bill = data.get("bill")
    if await qiwi_p2p_client.check_if_bill_was_paid(bill):
        await callback.message.answer(f'–°–ø–∞—Å–∏–±–æ –±—Ä–∞—Ç–∏—à–∫–∞! –û–ø–ª–∞—á—É —Å–µ—Ä–≤–∞–∫ –∏ –∫—É–ø–ª—é –ø–æx–∞–≤–∞—Ç—å!', reply_markup=kbusr)
        await state.finish()
        await bot.send_message(-1001657487556, f'üéÉ @{callback.from_user.username} *–∑–∞–∫–∏–Ω—É–ª 29 —Ä—É–±–ª–µ–≤*',
                               parse_mode="Markdown")
        cur = conn.cursor()
        cur.execute(f'''UPDATE users SET attempts = attempts + 10 WHERE user_id = ('{callback.from_user.id}')''')
    else:
        await callback.message.answer(f'–°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω!', reply_markup=kbusr)

@dp.callback_query_handler(text='99rub')
async def process_help_text(callback: types.CallbackQuery, state: FSMContext):
    async with qiwi_p2p_client:
        bill = await qiwi_p2p_client.create_p2p_bill(amount=99)
    ikbpayurl = InlineKeyboardMarkup()
    ikbpayurl.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –æ–ø–ª–∞—Ç—ãü•á', url=bill.pay_url))
    ikbpayurl.add(types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É‚úÖ', callback_data='paystatus'))
    ikbpayurl.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É‚ùå', callback_data='payabort'))
    await callback.message.answer('*–í–æ—Ç –≤–∞—à–∞ —Ñ–æ—Ä–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã*', reply_markup=ikbpayurl, parse_mode='markdown')
    await UserState.pay.set()
    await state.update_data(bill=bill)

@dp.callback_query_handler(text='payabort', state=UserState.pay)
async def process_help_text(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.answer(f'–û—Ç–∫–∞–∑ –æ–ø–ª–∞—Ç—ã', reply_markup=kbusr)
        await state.finish()

@dp.callback_query_handler(text='paystatus', state=UserState.pay)
async def process_help_text(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        bill: Bill = data.get("bill")
    if await qiwi_p2p_client.check_if_bill_was_paid(bill):
        await callback.message.answer(f'–°–ø–∞—Å–∏–±–æ –±—Ä–∞—Ç–∏—à–∫–∞! –û–ø–ª–∞—á—É —Å–µ—Ä–≤–∞–∫ –∏ –∫—É–ø–ª—é –ø–æx–∞–≤–∞—Ç—å!', reply_markup=kbusr)
        await state.finish()
        await bot.send_message(-1001657487556, f'üéÉ @{callback.from_user.username} *–∑–∞–∫–∏–Ω—É–ª 99 —Ä—É–±–ª–µ–≤*',
                               parse_mode="Markdown")
        cur = conn.cursor()
        cur.execute(f'''UPDATE users SET attempts = attempts + 50 WHERE user_id = ('{callback.from_user.id}')''')
    else:
        await callback.message.answer(f'–°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω!', reply_markup=kbusr)

@dp.callback_query_handler(text='159rub')
async def process_help_text(callback: types.CallbackQuery, state: FSMContext):
    async with qiwi_p2p_client:
        bill = await qiwi_p2p_client.create_p2p_bill(amount=159)
    ikbpayurl = InlineKeyboardMarkup()
    ikbpayurl.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –æ–ø–ª–∞—Ç—ãü•á', url=bill.pay_url))
    ikbpayurl.add(types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É‚úÖ', callback_data='paystatus'))
    ikbpayurl.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É‚ùå', callback_data='payabort'))
    await callback.message.answer('*–í–æ—Ç –≤–∞—à–∞ —Ñ–æ—Ä–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã*', reply_markup=ikbpayurl, parse_mode='markdown')
    await UserState.pay.set()
    await state.update_data(bill=bill)

@dp.callback_query_handler(text='payabort', state=UserState.pay)
async def process_help_text(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.answer(f'–û—Ç–∫–∞–∑ –æ–ø–ª–∞—Ç—ã', reply_markup=kbusr)
        await state.finish()

@dp.callback_query_handler(text='paystatus', state=UserState.pay)
async def process_help_text(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        bill: Bill = data.get("bill")
    if await qiwi_p2p_client.check_if_bill_was_paid(bill):
        await callback.message.answer(f'–°–ø–∞—Å–∏–±–æ –±—Ä–∞—Ç–∏—à–∫–∞! –û–ø–ª–∞—á—É —Å–µ—Ä–≤–∞–∫ –∏ –∫—É–ø–ª—é –ø–æx–∞–≤–∞—Ç—å!', reply_markup=kbusr)
        await state.finish()
        await bot.send_message(-1001657487556, f'üéÉ @{callback.from_user.username} *–∑–∞–∫–∏–Ω—É–ª 159 —Ä—É–±–ª–µ–≤*',
                               parse_mode="Markdown")
        cur = conn.cursor()
        cur.execute(f'''UPDATE users SET attempts = attempts + 100 WHERE user_id = ('{callback.from_user.id}')''')
    else:
        await callback.message.answer(f'–°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω!', reply_markup=kbusr)

@dp.callback_query_handler(text='349rub')
async def process_help_text(callback: types.CallbackQuery, state: FSMContext):
    async with qiwi_p2p_client:
        bill = await qiwi_p2p_client.create_p2p_bill(amount=349)
    ikbpayurl = InlineKeyboardMarkup()
    ikbpayurl.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –æ–ø–ª–∞—Ç—ãü•á', url=bill.pay_url))
    ikbpayurl.add(types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É‚úÖ', callback_data='paystatus'))
    ikbpayurl.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É‚ùå', callback_data='payabort'))
    await callback.message.answer('*–í–æ—Ç –≤–∞—à–∞ —Ñ–æ—Ä–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã*', reply_markup=ikbpayurl, parse_mode='markdown')
    await UserState.pay.set()
    await state.update_data(bill=bill)

@dp.callback_query_handler(text='payabort', state=UserState.pay)
async def process_help_text(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.answer(f'–û—Ç–∫–∞–∑ –æ–ø–ª–∞—Ç—ã', reply_markup=kbusr)
        await state.finish()

@dp.callback_query_handler(text='paystatus', state=UserState.pay)
async def process_help_text(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        bill: Bill = data.get("bill")
    if await qiwi_p2p_client.check_if_bill_was_paid(bill):
        await callback.message.answer(f'–°–ø–∞—Å–∏–±–æ –±—Ä–∞—Ç–∏—à–∫–∞! –û–ø–ª–∞—á—É —Å–µ—Ä–≤–∞–∫ –∏ –∫—É–ø–ª—é –ø–æx–∞–≤–∞—Ç—å!', reply_markup=kbusr)
        await state.finish()
        await bot.send_message(-1001657487556, f'üéÉ @{callback.from_user.username} *–∑–∞–∫–∏–Ω—É–ª 349 —Ä—É–±–ª–µ–≤*',
                               parse_mode="Markdown")
        
        cur = conn.cursor()
        cur.execute(f'''UPDATE users SET attempts = attempts + 9999999999999 WHERE user_id = (
        '{callback.from_user.id}')''')
    else:
        await callback.message.answer(f'–°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω!', reply_markup=kbusr)

@dp.message_handler(content_types=['text'], text='–ü—Ä–æ—Ñ–∏–ª—å üë§')
async def process_help_text(message: types.Message):
    user_channel_status = await bot.get_chat_member(chat_id='-1001881792031', user_id=message.from_user.id)
    if user_channel_status["status"] != 'left':
        cur = conn.cursor()
        cur.execute(f"SELECT attempts FROM users WHERE user_id = {message.from_user.id}")
        resatm = cur.fetchone()
        cur.execute(f"SELECT COUNT(ref) from users where ref = '{message.from_user.id}'")
        rescou = cur.fetchone()
        await message.answer(f"*‚îî –ê–π–¥–∏ -* `{message.from_user.id}`\n*‚îî –ü–æ–ø—ã—Ç–∫–∏ -* "f"{resatm[0]}\n*‚îî –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ - "
                             f"{rescou[0]}*",
                             parse_mode='markdown')
    else:
        await bot.send_message(message.from_user.id, '*–û–π-–æ–π, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ! –ü–æ–¥–ø–∏—à–∏—Å—å, '
                                                     '—á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π!*', reply_markup=ikbusr,
                               parse_mode='markdown')

@dp.message_handler(content_types=['text'], text='–ü–æ–º–æ—â—å üßë‚Äçüíª')
async def process_help_text(message: types.Message):
    user_channel_status = await bot.get_chat_member(chat_id='-1001881792031', user_id=message.from_user.id)
    if user_channel_status["status"] != 'left':
        await message.reply(f'*–ü—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ü–æ–¥–¥–µ—Ä–∂–∫—É:\nüîπ1. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –∏–∑–ª–æ–∂–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ '
                            '—Å–ª–æ–≤–∞–º–∏ - –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –í–∞–º –ø–æ–º–æ—á—å\nüîπ2. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π ID - –Ω–∞–º —ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å '
                            '–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å, –∏ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã.\nüîπ3. –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã, '
                            '–Ω–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –Ω–µ —Ä–æ–±–æ—Ç—ã, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –í–∞–º, –∏ —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, '
                            '—á—Ç–æ–±—ã —Å–±–µ—Ä–µ—á—å –≤–∞—à–µ –≤—Ä–µ–º—è –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–∞–±–æ—Ç–µ.\n–ù–∞–ø–∏—à–∏—Ç–µ '
                            f'–Ω–∞–º, –æ—Ç–≤–µ—Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∏, –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç –≤–∞—Å –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å!\nüîπ4. –í–∞—à ID -* '
                            f'`{message.from_user.id}`',
                            reply_markup=ikbusr, parse_mode="Markdown")
    else:
        await bot.send_message(message.from_user.id, '*–û–π-–æ–π, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ! –ü–æ–¥–ø–∏—à–∏—Å—å, '
                                                     '—á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π!*', reply_markup=ikbusr,
                               parse_mode='markdown')

@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    user_channel_status = await bot.get_chat_member(chat_id='-1001881792031', user_id=message.from_user.id)
    if user_channel_status["status"] != 'left':
        await message.reply(f'*–ü—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ü–æ–¥–¥–µ—Ä–∂–∫—É:\nüîπ1. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –∏–∑–ª–æ–∂–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ '
                            '—Å–ª–æ–≤–∞–º–∏ - –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –í–∞–º –ø–æ–º–æ—á—å\nüîπ2. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π ID - –Ω–∞–º —ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å '
                            '–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å, –∏ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã.\nüîπ3. –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã, '
                            '–Ω–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –Ω–µ —Ä–æ–±–æ—Ç—ã, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –í–∞–º, –∏ —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, '
                            '—á—Ç–æ–±—ã —Å–±–µ—Ä–µ—á—å –≤–∞—à–µ –≤—Ä–µ–º—è –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–∞–±–æ—Ç–µ.\n–ù–∞–ø–∏—à–∏—Ç–µ '
                            f'–Ω–∞–º, –æ—Ç–≤–µ—Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∏, –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç –≤–∞—Å –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å!\nüîπ4. –í–∞—à ID -* '
                            f'`{message.from_user.id}`',
                            reply_markup=ikbusr, parse_mode="Markdown")
    else:
        await bot.send_message(message.from_user.id, '*–û–π-–æ–π, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ! –ü–æ–¥–ø–∏—à–∏—Å—å, '
                                                     '—á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π!*', reply_markup=ikbusr,
                               parse_mode='markdown')

@dp.message_handler(commands=['menu'])
async def process_menu_command(message: types.Message):
    user_channel_status = await bot.get_chat_member(chat_id='-1001881792031', user_id=message.from_user.id)
    if user_channel_status["status"] != 'left':
        await message.answer('–ö–Ω–æ–ø–∫–∏', reply_markup=kbusr)
    else:
        await bot.send_message(message.from_user.id, '*–û–π-–æ–π, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ! –ü–æ–¥–ø–∏—à–∏—Å—å, '
                                                     '—á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π!*', reply_markup=ikbusr,
                               parse_mode='markdown')

@dp.message_handler(commands=['unmenu'])
async def process_menu_command(message: types.Message):
    user_channel_status = await bot.get_chat_member(chat_id='-1001881792031', user_id=message.from_user.id)
    if user_channel_status["status"] != 'left':
        await message.answer('–ö–Ω–æ–ø–∫–∏', reply_markup=types.ReplyKeyboardRemove())
    else:
        await bot.send_message(message.from_user.id, '*–û–π-–æ–π, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ! –ü–æ–¥–ø–∏—à–∏—Å—å, '
                                                     '—á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π!*', reply_markup=ikbusr,
                               parse_mode='markdown')

@dp.message_handler(content_types=['text'], text='–ü—Ä–æ–±–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüß¶')
async def oper(message: types.Message, state: FSMContext):
    chat_admins = await bot.get_chat_administrators(-1001657487556)
    admid = list()
    for admins in chat_admins:
        userId = admins.user.id
        admid.append(userId)
    if message.from_user.id in admid:
        cadm = types.ReplyKeyboardMarkup(resize_keyboard=True)
        cadm.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥"))
        await UserState.oper.set()
        await message.reply('üé≠–ù–∞–ø–∏—à–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=cadm)

@dp.message_handler(state=UserState.oper)
async def probivOPER(message: types.message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await message.answer('üîÆ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kbadm)
        await state.finish()
    else:
        if message.text.isdigit():
            await state.update_data(oper=message.text)
            ikboper = InlineKeyboardMarkup()
            ikboper.add(types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞üéâ", callback_data="messoper"))
            data = await state.get_data()
            cur = conn.cursor()
            cur.execute(f"SELECT attempts FROM users WHERE user_id = {data['oper']}")
            resatm = cur.fetchone()
            cur.execute(f"SELECT ref FROM users WHERE user_id = {data['oper']}")
            resref = cur.fetchone()
            cur.execute(f"SELECT name FROM users WHERE user_id = {data['oper']}")
            resname = cur.fetchone()
            await message.answer(f"*–ê–π–¥–∏ -* `{data['oper']}`\n*–Æ–∑–µ—Ä–Ω–µ–π–º -* @{resname[0]}\n*–†–µ—Ñ–∫–∞ -*"
                                 f"{resref[0]}\n*–ü–æ–ø—ã—Ç–∫–∏ -* "f"{resatm[0]}", parse_mode='markdown', reply_markup=kbadm)
            conn.commit()
        else:
            await message.answer(
                f"–í–≤–æ–¥–∏—à—å –Ω–µ —á–∏—Å–ª–∞!", parse_mode='markdown', reply_markup=kbadm)
            await state.finish()

@dp.callback_query_handler(text="messoper")
async def send_random_value(callback: types.CallbackQuery, state: FSMContext):
    cadm = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cadm.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥"))
    data = await state.get_data()
    await state.finish()
    await callback.message.answer('*–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ*', parse_mode='markdown', reply_markup=cadm)
    await state.update_data(id=data)

@dp.message_handler(state=UserState.oper, content_types=['any'])
async def probivOPER(message: types.message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await message.answer('üîÆ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kbadm)
        await state.finish()
    else:

        await message.send_copy(1)
        await message.answer('üîÆ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=kbadm)
        await state.finish()

@dp.message_handler(content_types=['text'], text='–†–∞—Å—Å—ã–ª–∫–∞üì§')
async def spam(message: types.Message):
    chat_admins = await bot.get_chat_administrators(-1001657487556)
    admid = list()
    for admins in chat_admins:
        userId = admins.user.id
        admid.append(userId)
    if message.from_user.id in admid:
      keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
      keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥"))
      await UserState.spam.set()
      await message.answer('–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏‚å®', reply_markup=keyboard)
    else:
      await message.answer('üß®–ß—É–º–±–∞ —Ç—ã —á–µ –µ–±–ª–∞–Ω? –¢—ã –Ω–µ –∞–¥–º–∏–Ωüß®')

@dp.message_handler(state=UserState.spam, content_types=['any'])
async def start_spam(message: types.message, state: FSMContext):
  if message.text == '–ù–∞–∑–∞–¥':
    await message.answer('üîÆ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kbadm)
    await state.finish()
  else:
    await state.update_data(mess=message["message_id"])
    cur = conn.cursor()
    cur.execute(f'''SELECT user_id FROM users''')
    spam_base = cur.fetchall()
    for z in range(len(spam_base)):
        try:
            await message.send_copy(spam_base[z][0])
            await state.finish()
        except:
            await state.finish()
    await bot.send_message(-1001657487556,
                           f'üíä *{message.from_user.id} | @{message.from_user.username} –°–¥–µ–ª–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É*',
                           parse_mode="Markdown")
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úî', reply_markup=kbadm)
    await state.finish()

@dp.message_handler(content_types=['text'], text='–ë–î—à–∫–∞‚ú®')
async def hfandler(message: types.Message, state: FSMContext):
    chat_admins = await bot.get_chat_administrators(-1001657487556)
    admid = list()
    for admins in chat_admins:
        userId = admins.user.id
        admid.append(userId)
    if message.from_user.id in admid:
        await message.reply_document(open('db.db', 'rb'))
        cur = conn.cursor()
        cur.execute('''select * from users''')
        results = cur.fetchall()
        await message.answer(f'–õ—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞ –ª–∏–±–æ –∑–∞—Ö–æ–¥–∏–ª–∏ –≤ –±–æ—Ç–∞: {len(results)}')
        for z in range(len(results)):
            await message.answer(f'@{results[z][1]} | {results[z][0]}')

@dp.message_handler(content_types=['text'], text='–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏üö®')
async def hfandler(message: types.Message, state: FSMContext):
    chat_admins = await bot.get_chat_administrators(-1001657487556)
    admid = list()
    for admins in chat_admins:
        userId = admins.user.id
        admid.append(userId)
    if message.from_user.id in admid:
          keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
          keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥"))
          await message.answer(f'*üé¢ –í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ø—ã—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:*\n `ID ATTEMPTS`',
                               reply_markup=keyboard, parse_mode="Markdown")
          await UserState.attempts.set()
    else:
        await message.answer('*üß®–ß—É–º–±–∞ —Ç—ã —á–µ –µ–±–ª–∞–Ω? –¢—ã –Ω–µ –∞–¥–º–∏–Ωüß®*', parse_mode="Markdown")

@dp.message_handler(state=UserState.attempts)
async def proc(message: types.Message, state: FSMContext):
    chat_admins = await bot.get_chat_administrators(-1001657487556)
    admid = list()
    for admins in chat_admins:
        userId = admins.user.id
        admid.append(userId)
    if message.from_user.id in admid:
      if message.text == '–ù–∞–∑–∞–¥':
        await message.answer('*üîÆ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', reply_markup=kbadm, parse_mode="Markdown")
        await state.finish()
      else:
          data = message.text.split()
          cur = conn.cursor()
          cur.execute(f"SELECT attempts FROM users WHERE user_id = {data[0]}")
          result = cur.fetchall()
          conn.commit()
          if len(result) == 0:
            await message.answer('üìÇ–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É', reply_markup=kbadm)
          else:
              data = message.text.split()
              cur = conn.cursor()
              cur.execute(f"UPDATE users SET attempts = {data[1]} WHERE user_id = {data[0]}")
              conn.commit()
              await message.answer('üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=kbadm)
              await bot.send_message(-1001657487556,
                                     f'üíä *{message.from_user.id} | @{message.from_user.username} –æ–±–Ω–æ–≤–∏–ª –ø–æ–ø—ã—Ç–∫–∏*\n'
                                     f'*{data[0]},'
                                     f' {data[1]}*',
                                     parse_mode="Markdown")
              await bot.send_message(data[0], f'–ù–æ–≤–æ–µ –∫–æ–ª-–≤–æ –≤–∞—à–∏x –ø–æ–ø—ã—Ç–æ–∫ —Ä–∞–≤–Ω–æ {data[1]}üí£.')
      await state.finish()
    else:
      await message.answer('üß®–ß—É–º–±–∞ —Ç—ã —á–µ –µ–±–ª–∞–Ω? –¢—ã –Ω–µ –∞–¥–º–∏–Ωüß®')

@dp.message_handler(content_types=['text'], text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üí≠')
async def hfandler(message: types.Message, state: FSMContext):
    chat_admins = await bot.get_chat_administrators(-1001657487556)
    admid = list()
    for admins in chat_admins:
        userId = admins.user.id
        admid.append(userId)
    if message.from_user.id in admid:
        cur = conn.cursor()
        cur.execute('''select * from users''')
        results = cur.fetchall()
        await message.answer(f'–õ—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞ –ª–∏–±–æ –∑–∞—Ö–æ–¥–∏–ª–∏ –≤ –±–æ—Ç–∞: {len(results)}')
    else:
        await message.answer('üß®–ß—É–º–±–∞ —Ç—ã —á–µ –µ–±–ª–∞–Ω? –¢—ã –Ω–µ –∞–¥–º–∏–Ωüß®')


@dp.message_handler(text=('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ üíó'))
async def user_register(message: types.Message):
    user_channel_status = await bot.get_chat_member(chat_id='-1001881792031', user_id=message.from_user.id)
    if user_channel_status["status"] != 'left':
        await message.answer(f'‚ú®–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>https://t.me/FalafelRoBot?start='
                         f'{message.from_user.id}</code>',parse_mode='html')
    else:
        await bot.send_message(message.from_user.id, '*–û–π-–æ–π, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ! –ü–æ–¥–ø–∏—à–∏—Å—å, '
                                                     '—á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π!*', reply_markup=ikbusr,
                               parse_mode='markdown')

@dp.message_handler(content_types=['text'], text='–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ ‚ö°Ô∏è')
async def process_help_text(message: types.Message):
    user_channel_status = await bot.get_chat_member(chat_id='-1001881792031', user_id=message.from_user.id)
    if user_channel_status["status"] != 'left':
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥"))
            ikbmanual = InlineKeyboardMarkup()
            ikbmanual.add(types.InlineKeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚ö†Ô∏è', url='https://telegra.ph/Pravila-napisaniya-zaprosov-02-24'))
            await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å üßµ', reply_markup=keyboard)
            await bot.send_message(message.from_user.id, '*–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é*', reply_markup=ikbmanual,
                                   parse_mode='markdown')
            await UserState.openaii.set()
    else:
            await bot.send_message(message.from_user.id, '*–û–π-–æ–π, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ! –ü–æ–¥–ø–∏—à–∏—Å—å, '
                                                         '—á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π!*', reply_markup=ikbusr,
                                   parse_mode='markdown')

@dp.message_handler(state=UserState.openaii)
async def get_username(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await message.answer('üîÆ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kbusr)
        await state.finish()
    else:
        await state.update_data(check=message.text)
        await state.finish()
        cur = conn.cursor()
        cur.execute(f"SELECT attempts FROM users WHERE user_id = {message.from_user.id}")
        result = cur.fetchone()
        conn.commit()
        try:
            if result[0] > 0:
                cur.execute(f'''UPDATE users SET attempts = attempts - 1 WHERE user_id = ('{message.from_user.id}')''')
                cur.execute(f'''UPDATE users SET quest = ('{message.text}') WHERE user_id = ('{message.from_user.id}')''')
                conn.commit()
                await state.update_data(check=message.text)
                data = await state.get_data()
                messeng = GoogleTranslator(sourse='auto', target='en').translate(data['check'])
                await bot.send_message(-1001657487556, f'üéÉ {message.from_user.id} | @{message.from_user.username} '
                                                       f'<b>–≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–ø—Ä–æ—Å:</b>\n<code>{message.text}</code>',
                                       parse_mode="html")
                await message.reply(f'<b>‚åö –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç 5 —Å–µ–∫—É–Ω–¥ –¥–æ 300 —Å–µ–∫—É–Ω–¥</b>',
                                       parse_mode="html", reply_markup=types.ReplyKeyboardRemove())
                try:
                    completion = await openai.Completion.acreate(
                        engine=model_engine,
                        prompt=messeng,
                        max_tokens=1024,
                        temperature=1,
                        top_p=1,
                        frequency_penalty=0,
                        presence_penalty=0
                    )
                    messru = GoogleTranslator(sourse='auto', target='ru').translate(completion.choices[0].text)
                    await message.reply(messru, reply_markup=kbusr)
                    await bot.send_message(-1001657487556,
                                           f'‚ô• <b>–ó–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ</b> {message.from_user.id} | '
                                           f'@{message.from_user.username}\n<code>{messru}</code>',
                                           parse_mode="html")
                except:
                    await message.reply('–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å', reply_markup=kbusr)
                    await bot.send_message(-1001657487556,
                                           f'üòî <b>200 —Ä–µ—Å–ø–æ–Ω—Å –Ω–∞ #{message.from_user.username}</b>\n<code>{messru}</code>',
                                           parse_mode="html")
            else:
                await message.reply('üé±–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É\nüéé–ò–ª–∏ –ø—Ä–∏–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∞',
                                    reply_markup=kbusr)
        except Exception as e:
            await message.reply('üß® –û–π! –°–ª—É—á–∏–ª—Å—è —Å–±–æ–π, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å /start')
            await bot.send_message(-1001657487556,f'üòî <b>–ë–î—à–∫–∞ –Ω–∞–µ–±–Ω—É–ª–∞—Å—å –Ω–∞ #{message.from_user.username}</b>\n<code>'
                                                  f'{traceback.format_exc()}</code>',
                                           parse_mode="html")

if __name__ == '__main__':
  executor.start_polling(dp, skip_updates=True)